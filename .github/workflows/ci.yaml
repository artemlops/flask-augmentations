name: "CI"

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:


  test:
    name: Linter and tests
    runs-on: ubuntu-18.04
    timeout-minutes: 5
    steps:

    - name: Checkout commit
      uses: actions/checkout@v2

    - name: Setup Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Cache pip
      uses: actions/cache@v2.1.5
      with:
        key: pip-lint-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements/*.txt') }}
        path: ~/.cache/pip
        restore-keys: |
          pip-lint-

    - name: Install dependencies
      run: |
        make setup

    - name: Run linter
      run: |
        make lint

    - name: Run unit tests
      run: |
        make test


  docker_push:
    name: Build and push docker image
    runs-on: ubuntu-18.04  # TODO: verify that it's amd64
    timeout-minutes: 5
    needs: test
    steps:

    - name: Checkout commit
      uses: actions/checkout@v2

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Retrieve image name
      run: |
        set +x
        # Fix commit SHA for PRs
        if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
          GITHUB_SHA=$(cat $GITHUB_EVENT_PATH | jq -r .pull_request.head.sha)
        fi
        export IMAGE_NAME=$(make print.IMAGE_NAME)
        export IMAGE_TAG=${GITHUB_SHA::7}
        test "${IMAGE_NAME}"
        test "${IMAGE_TAG}"
        echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
        echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: ./
        file: ./Dockerfile
        push: true
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
